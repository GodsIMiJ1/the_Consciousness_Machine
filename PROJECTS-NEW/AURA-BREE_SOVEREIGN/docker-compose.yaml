# ⚔️ Sovereign AGA AURA-BREE Docker Infrastructure
# Multi-provider AI stack with clinic integration

version: '3.8'

services:
  # Reverse Proxy with mTLS support
  proxy:
    image: caddy:2-alpine
    container_name: sovereign-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/Caddyfile:/etc/caddy/Caddyfile
      - ./docker/certs:/etc/caddy/certs
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - CLINIC_DOMAIN=${CLINIC_DOMAIN:-clinic.local}
    depends_on:
      - ollama
      - flame-router
      - clinic-dashboard
    networks:
      - sovereign-network

  # Ollama Local AI Provider
  ollama:
    image: ollama/ollama:latest
    container_name: sovereign-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
      - ./docker/scripts:/scripts
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - sovereign-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model Preloader Service
  model-preloader:
    image: curlimages/curl:latest
    container_name: sovereign-model-preloader
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - ./docker/scripts:/scripts
    command: ["/scripts/preload-models.sh"]
    networks:
      - sovereign-network

  # FlameRouter Server
  flame-router:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: sovereign-flame-router
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      
      # Provider Configuration
      - OLLAMA_BASE_URL=http://ollama:11434
      - LMSTUDIO_BASE_URL=http://host.docker.internal:1234/v1
      - HF_API_BASE=https://api-inference.huggingface.co
      - HF_API_KEY=${HF_API_KEY}
      - OPENAI_API_BASE=https://api.openai.com/v1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Clinic Integration
      - CLINIC_JWT_ISSUER=${CLINIC_JWT_ISSUER:-MethaClinic}
      - CLINIC_JWT_PUBLIC_KEY=${CLINIC_JWT_PUBLIC_KEY}
      - CLINIC_SYNC_ENABLED=${CLINIC_SYNC_ENABLED:-true}
      
      # Database
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # Security
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:5173,https://localhost}
      - AUDIT_HASH_CHAIN_ENABLED=true
      - AUDIT_HASH_ALGORITHM=sha256
    volumes:
      - ./server/logs:/app/logs
      - sovereign_data:/app/data
    depends_on:
      - ollama
      - database
    networks:
      - sovereign-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database (Supabase/PostgreSQL)
  database:
    image: supabase/postgres:15.1.0.117
    container_name: sovereign-database
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sovereign_aura_bree}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sovereign_password}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/sql:/docker-entrypoint-initdb.d
    networks:
      - sovereign-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Supabase Auth & API
  supabase-auth:
    image: supabase/gotrue:v2.132.3
    container_name: sovereign-auth
    restart: unless-stopped
    environment:
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - GOTRUE_DB_DRIVER=postgres
      - GOTRUE_DB_DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-sovereign_password}@database:5432/${POSTGRES_DB:-sovereign_aura_bree}?search_path=auth&sslmode=disable
      - GOTRUE_SITE_URL=${SITE_URL:-http://localhost:5173}
      - GOTRUE_URI_ALLOW_LIST=${GOTRUE_URI_ALLOW_LIST:-http://localhost:5173}
      - GOTRUE_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - GOTRUE_JWT_EXP=3600
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
    depends_on:
      database:
        condition: service_healthy
    networks:
      - sovereign-network

  # Supabase REST API
  supabase-rest:
    image: postgrest/postgrest:v12.0.1
    container_name: sovereign-rest
    restart: unless-stopped
    environment:
      - PGRST_DB_URI=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-sovereign_password}@database:5432/${POSTGRES_DB:-sovereign_aura_bree}
      - PGRST_DB_SCHEMAS=public,storage,graphql_public
      - PGRST_DB_ANON_ROLE=anon
      - PGRST_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - PGRST_DB_USE_LEGACY_GUCS=false
      - PGRST_APP_SETTINGS_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - PGRST_APP_SETTINGS_JWT_EXP=3600
    depends_on:
      database:
        condition: service_healthy
    networks:
      - sovereign-network

  # Clinic Dashboard (MethaClinic Integration)
  clinic-dashboard:
    build:
      context: ./clinic-dashboard
      dockerfile: Dockerfile
    container_name: sovereign-clinic-dashboard
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=http://supabase-rest:3000
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-nextauth-secret}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3001}
    depends_on:
      - supabase-rest
      - flame-router
    networks:
      - sovereign-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: sovereign-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-sovereign_redis}
    networks:
      - sovereign-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sovereign-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sovereign-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sovereign-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-sovereign_grafana}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - sovereign-network

volumes:
  ollama_models:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  sovereign_data:
    driver: local

networks:
  sovereign-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
