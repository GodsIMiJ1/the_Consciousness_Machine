version: '3.8'

services:
  # Omari with Omnirelay Adapter
  omari:
    build:
      context: ../../
      dockerfile: packages/omnirelay-adapter/Dockerfile
    ports:
      - "5000:5000"
    environment:
      # Core Configuration
      NODE_ENV: production
      PORT: 5000

      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # Database Configuration
      DATABASE_URL: postgresql://omari:${POSTGRES_PASSWORD}@postgres:5432/omari

      # Omnirelay Configuration
      OMNIRELAY_SHARED_SECRET: ${OMNIRELAY_SHARED_SECRET}
      OMNIRELAY_ALLOWED_IPS: ${OMNIRELAY_ALLOWED_IPS:-10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}
      OMNIRELAY_WEBHOOK_URL: ${OMNIRELAY_WEBHOOK_URL}
      OMARI_MODE: ${OMARI_MODE:-local}
      RATE_LIMIT_RPM: ${RATE_LIMIT_RPM:-60}
      DEVICE_KEY_SECRET: ${DEVICE_KEY_SECRET}

      # Build Information
      BUILD_SHA: ${BUILD_SHA:-docker}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - omari-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/relay/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: omari
      POSTGRES_USER: omari
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - omari-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omari -d omari"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  omari-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
