
from pathlib import Path
import datetime
from .detect import detect_project_type, read_project_name

README_TMPL = """# {name}

> Auto-generated by Project Sanctum CLI on {date}

## Overview
This project was detected at: `{root}`

**Detected types:** {types}

## Structure (top level)
{tree}

## Next Steps
- Fill this README with actual context: purpose, architecture, how to run, tests.
- Add LICENSE if missing.
- Add CI workflow if needed.

"""

def render_tree(root: Path, depth=2):
    entries = []
    for p in sorted(root.iterdir()):
        if p.name.startswith(".") or p.name in {"node_modules","dist","build",".venv","venv","__pycache__"}:
            continue
        prefix = "üìÅ" if p.is_dir() else "üìÑ"
        entries.append(f"- {prefix} {p.name}")
    return "\n".join(entries)

def generate_readme(root: Path, overwrite=False):
    name = read_project_name(root)
    types = ", ".join(detect_project_type(root)) or "-"
    date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    out = root / "README.SANCTUM.md"
    if out.exists() and not overwrite:
        return out
    out.write_text(README_TMPL.format(name=name, date=date, root=str(root), types=types, tree=render_tree(root)))
    return out
